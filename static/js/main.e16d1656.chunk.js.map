{"version":3,"sources":["logo.svg","container/Home/index.js","hoc/responsive.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withResponsive","Component","props","responsiveInfo","isDesktop","useMediaQuery","minWidth","isTablet","maxWidth","isMobile","isNotMobile","isPortrait","query","isRetina","Yes","style","color","No","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,kC,wLC+B5BC,ECxBQ,SAACC,GAEpB,OAAO,SAAUC,GACb,IAAMC,EAAiB,CACnBC,UAAYC,wBAAc,CAAEC,SAAU,MACtCC,SAAWF,wBAAc,CAAEC,SAAU,IAAKE,SAAU,MACpDC,SAAWJ,wBAAc,CAAEG,SAAU,MACrCE,YAAcL,wBAAc,CAAEC,SAAU,MACxCK,WAAaN,wBAAc,CAAEO,MAAO,4BACpCC,SAAWR,wBAAc,CAAEO,MAAO,6BAEtC,OAAO,kBAACX,EAAD,iBAAeC,EAAf,CAAsBC,eAAgBA,MDatCH,EA5BF,SAACE,GACV,IAAMY,EAAM,kBAAM,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,QACZC,EAAK,kBAAM,0BAAMF,MAAO,CAAEC,MAAO,YAAtB,OAEjB,OACI,oCACI,6CACkBd,EAAMC,eAAeC,UAAY,kBAACU,EAAD,MAAU,kBAACG,EAAD,OAE7D,4CACiBf,EAAMC,eAAeI,SAAW,kBAACO,EAAD,MAAU,kBAACG,EAAD,OAE3D,4CACiBf,EAAMC,eAAeM,SAAW,kBAACK,EAAD,MAAU,kBAACG,EAAD,OAE3D,gDACqBf,EAAMC,eAAeO,YAAc,kBAACI,EAAD,MAAU,kBAACG,EAAD,OAElE,8CACmBf,EAAMC,eAAeQ,WAAa,kBAACG,EAAD,MAAU,kBAACG,EAAD,OAE/D,4CACiBf,EAAMC,eAAeU,SAAW,kBAACC,EAAD,MAAU,kBAACG,EAAD,WERxDC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e16d1656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport withResponsive from \"../../hoc/responsive\";\r\n\r\nconst Home = (props) => {\r\n    const Yes = () => <span style={{ color: \"#5cb85c\" }}>YES</span>;\r\n    const No = () => <span style={{ color: \"#d9534f\" }}>NO</span>;\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                Is Desktop : {props.responsiveInfo.isDesktop ? <Yes /> : <No />}\r\n            </div>\r\n            <div>\r\n                Is Tablet : {props.responsiveInfo.isTablet ? <Yes /> : <No />}\r\n            </div>\r\n            <div>\r\n                Is Mobile : {props.responsiveInfo.isMobile ? <Yes /> : <No />}\r\n            </div>\r\n            <div>\r\n                Is Not Mobile : {props.responsiveInfo.isNotMobile ? <Yes /> : <No />}\r\n            </div>\r\n            <div>\r\n                Is Portrait : {props.responsiveInfo.isPortrait ? <Yes /> : <No />}\r\n            </div>\r\n            <div>\r\n                Is Retina : {props.responsiveInfo.isRetina ? <Yes /> : <No />}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withResponsive(Home);\r\n","/**\r\n * This is an HOC. Use this 'withResponsive' hoc component for responsive UI.\r\n */\r\n\r\nimport React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nconst withResponsive = (Component) => {\r\n\r\n    return function (props) {\r\n        const responsiveInfo = {\r\n            isDesktop : useMediaQuery({ minWidth: 992 }),\r\n            isTablet : useMediaQuery({ minWidth: 768, maxWidth: 991 }),\r\n            isMobile : useMediaQuery({ maxWidth: 767 }),\r\n            isNotMobile : useMediaQuery({ minWidth: 768 }),\r\n            isPortrait : useMediaQuery({ query: '(orientation: portrait)' }),\r\n            isRetina : useMediaQuery({ query: '(min-resolution: 2dppx)' })\r\n        }\r\n        return <Component {...props} responsiveInfo={responsiveInfo} />\r\n    }\r\n}\r\n\r\nexport default withResponsive;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from \"./container/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}